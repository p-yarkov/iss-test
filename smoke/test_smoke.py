# -*- coding: utf-8 -*-
import pytest
import shutil
import os
import psutil
import time
import pywinauto
from pywinauto.controls.hwndwrapper import InvalidWindowHandle


from iss.asserts import assert_window


def test_smoke_install(securos_install):
    '''1. Установка (дефолт)
    Описание: Тест для проверки корректной установки SecurOS на чистую систему с уже имеющимся ключом.

    Шаги Выполнения:
        1.  Запустить установщик SecurOSEnterprise_<версия>.exe .
        2.  Выбрать язык установки предложенный по-умолчанию.
        3.  Установить необходимые для выполнения установки пакеты и обновления.
        4.  Пройти окно приветствия установщика.
        5.  Принять лицензионное соглашание.
        6.  Пройти выбор типа установки.
        7.  Пройти выбор типа сервера.
        8.  Пройти выбор варианта установки файла лицензионного ключа.
        9.  Пройти выбор языка программы.
        10. Пройти выбор установки дополнительных драйверов.
        11. Пройти окно готовности установщика.
        12. Дождаться завершения процесса установки SecurOS.
        13. Завершить работу установщика контролом "Готово".

    Ожидаемый результат:
        1.  Установщик запущен и отображено окно выбро языка установки
        2.  Язык установки соответствует заданной в системе локали (русский для русской, английский для всех осттальных).
        При нажатии кнопки "ОК" окно закрылось и отобразилось окно с предложением установить необходимые пакеты для продолжения.
        3.  При нажатии кнопки "Установить" установщик отобразил все необходимые пакеты для продолжения установки,
        отобразил процесс их установки и успешно установил. Затем отобразилось окно приветствия установщика.
        4.  При нажатии кнопки "Далее" отобразилось окно лицензионного соглашения.
        5.  По-умолчанию стоит радибокс "Не принимать". После установки радиобокса на "Принять" стала доступна кнопка "Далее".
        После нажатия кнопки "Далее" отобразилось окно с выбором типа установки.
        6.  По-умолчанию выбран вариант "Упрощенная установка". После нажатия кнопки "Далее" отобразилось окно выбора типа сервера.
        7.  По-умолчанию выбран вариант "Сервер конфигураций". После нажатия кнопки "Далее" отобразилось окно выбора варианта установки ключа.
        8.  По-умолчанию выбран вариант "Не копировать". После нажатия кнопки "Далее" отобразилось окно выбора языка SecurOS.
        9.  Язык по-умолчанию предложен такой же как язык установщика. После нажатия кнопки "Далее" отобразилось
        окно выбора установки дополнительных драйверов.
        10. Чекбокс "Устанавливать ISS Integrated Devices Pack" выбрано по-умолчанию, остальные сняты.
        После нажатия кнопки "Далее" отобразилось окно готовности установщика.
        11. После нажатия кнопки "Установить" отобразилось окно с процессом установки SecurOS.
        12. Процесс установки завершился успешно, после чего отобразилось окно завершения установки.
        13. После нажатия кнопки "Готово" окно установщика закрылось и установщик завершил работу.'''

    assert securos_install.is_running() # Шаг 1
    installer = pywinauto.Application().connect(process=securos_install.pid)
    assert_window(installer, "Русский", "Значение по-умолчанию не верное - ожидали Русский")  # TODO: Здесь у нас должна определяться локаль вместо хардкода
    assert_window(installer, ".OK", "Выбор языка завис", "click") # Шаг 2
    assert_window(installer, "Установить", "Установка библиотек зависла", "click", timer=300)
    assert_window(installer, "Подготовка", "Подготовка к установке завершилась с ошибкой") # Шаг 3
    assert_window(securos_install, err="Установщик завис", action="children")
    msi = pywinauto.Application().connect(process=securos_install.children()[0].pid)
    assert_window(msi, ".Далее.", "Приветствие зависло", "click", timer=60) # Шаг 4
    assert_window(msi, "Я..принимаю", "Лицензионное соглашение зависло", "click")
    assert_window(msi, ".Далее.", "Лицензионное соглашение зависло", "click") # Шаг 5
    assert_window(msi, "Упрощённая", "Значение по-умолчанию не верное - ожидали Упрощённая установка")
    assert_window(msi, ".Далее.", "Тип установки завис", "click") # Шаг 6
    assert_window(msi, "Сервер", "Значение по-умолчанию не верное - ожидали Сервер конфигураций")
    assert_window(msi, ".Далее.", "Тип сервера завис", "click") # Шаг 7
    assert_window(msi, "Не копировать", "Значение по-умолчанию не верное - ожидали Не копировать", "check", add=1)
    assert_window(msi, ".Далее.", "Выбор ключа завис", "click") # Шаг 8
    assert_window(msi, "Русский", "Значение по-умолчанию не верное - ожидали Русский")
    assert_window(msi, ".Далее.", "Язык программы завис", "click") # Шаг 9
    assert_window(msi, " Устанавливать ISS Integrated Devices Pack",
                  "Значение по-умолчанию не верное - ожидали ISS Integrated выбран", "check", add=1)
    assert_window(msi, " Устанавливать драйвер Guardant",
                  "Значение по-умолчанию не верное - ожидали Guardant не выбран", "check", add=0)
    assert_window(msi, " Устанавливать драйвера для плат TVISS-RT",
                  "Значение по-умолчанию не верное - ожидали TVISS-RT не выбран", "check", add=0)
    assert_window(msi, " Устанавливать драйвера для плат TVISS-MX",
                  "Значение по-умолчанию не верное - ожидали TVISS-MX не выбран", "check", add=0)
    assert_window(msi, ".Далее.", "Дополнительные драйвера зависли", "click") # Шаг 10
    assert_window(msi, ".Установить", "Готовность к установке зависла", "click") # Шаг 11
    assert_window(msi, "Программа InstallShield Wizard успешно установила", "Установка завершилась с ошибкой", timer=300) # Шаг 12
    assert_window(msi, ".Готово", "Завершение установки зависло", "click") # Шаг 13



def test_smoke_wizard(securos_start):
    '''2. Первый запуск (визард дефолт)
    Описание: Тест для проверки возможности первого запуска SecurOS с конфигурацией по-умолчанию.
    Предусловия: Все предыдущие тесты в тест-комплекте завершены успешно. В папку установки SecurOS подложен файл key.iss из приложения.
    В системе, где запускается SecurOS, один системный диск.

    Шаги выполнения:
        1.  Запустить SecurOS.
        2.  Пройти выбор сценария работы мастера.
        3.  Пройти окно просмотра лицензии.
        4.  Подтвердить стандартный пароль.
        5.  Пройти окно настройки пароля суперпользователя.
        6.  Пройти окно настройки пользователей системы.
        7.  Пройти окно настройки видеосервера.
        8.  Пройти окно добавления IP устройств.
        9.  Пройти окно добавления УРМ-М.
        10. Пройти окно итоговой информации.
        11. Завершить работу мастера конфигурации.

    Ожидаемый результат:
        1.  Открывается диалоговое окно Мастера первого запуска.
        2.  По-умолчанию выбран вариант "Настроить с помощью Мастера".
        После нажатия кнопки "Далее" открывается окно просмотра лицензии.
        3.  После нажатия кнопки "Далее" открывается окно настройки пароля суперпользователя.
        4.  По-умолчанию пользователь задан как "root", а пароль установлен как "securos".
        После нажатия кнопки "Подтвердить пароль" стала доступна кнопка "Далее".
        5.  После нажатия кнопки "Далее" открывается окно настройки пользователей системы.
        6.  По-умолчанию пользователей в списке нет. После нажатия кнопки "Далее" открывается окно настройки видеосервера.
        7.  По-умолчанижю диск для записи не отмечен. После выбора системного диска для хранения видео
        и нажатия кнопки "Далее" открывается окно добавления IP устройств.
        8.  По-умолчанию список IP устройств пуст. После нажатия кнопки "Далее" открывается окно добавления УРМ-М.
        9.  По-умолчанию список УРМ-М пуст. После нажатия кнопки "Далее" открывается окно итоговой информации.
        10. После нажатия кнопки "Завершить" мастер отображает окно об успешности сохранения конфигурации.
        11. После нажатия кнопки "ОК" мастер завершает работу, затем запускается SecurOS (ядро, видео и медиаклиент).'''


    wizard = pywinauto.Application(backend="uia").connect(process=securos_start["wizard.exe"].pid)
    assert_window(wizard, "Сценарий работы", "Ошибка запуска визарда")  # Шаг 1
    assert_window(wizard, "Настроить с помощью Мастера",
                  "Значение по-умолчанию не верное - ожидали Настроить с помощью Мастера выбран", "check",
                  add=1, backend="uia")
    assert_window(wizard, "Далее", "Выбор сценария конфигурации завис", "click")  # Шаг 2
    assert_window(wizard, "Просмотр лицензии", "Не открылось окно просмотра лицензии")
    assert_window(wizard, "Далее", "Окно просмотра лицензии зависло", "click")  # Шаг 3
    assert_window(wizard, "Настройка пароля", "Не открылось окно настройки пароля")
    assert_window(wizard, "root", "Стандартный суперпользователь задан не верно")
    assert_window(wizard, "securos", "Стандартный пароль суперпользователя задан не верно")
    assert_window(wizard, "Подтвердить", "Кнопка подтвердить пароль недоступна", "click")  # Шаг 4
    assert_window(wizard, "Далее", "Кнопка Далее недоступна или окно настроек суперпользователя зависло", "click")  # Шаг 5
    assert_window(wizard, "Список пользователей:table", "Список пользователей не пуст", "length", add=4)
    assert_window(wizard, "Далее", "Окно настройки пользователя зависло", "click")  # Шаг 6
    #assert_window(wizard, "Далее", "Диск по умолчанию выбран - ожидали что не будет", "enabled", add="not")
    assert_window(wizard, "Выбрать все", "Кнопка выбора всех дисков не доступна", "click")
    assert_window(wizard, "Далее", "Окно настройки видеосервера зависло", "click")  # Шаг 7
    assert_window(wizard, "Список IP-устрйоств:Table", "Список IP_устройств не пуст", "length", add=8)
    assert_window(wizard, "Далее", "Окно добавления IP-устройств зависло", "click")  # Шаг 8
    assert_window(wizard, "Список рабочих мест мониторинга:TreeView", "Список IP_устройств не пуст", "length", add=3)
    assert_window(wizard, "Далее", "Окно добавления УРМ-М зависло", "click")  # Шаг 9
    assert_window(wizard, "Итоговая информация", "Не открылось окно итоговой информации")
    assert_window(wizard, "Завершить", "Окно итоговой информации зависло", "click")
    assert_window(wizard, "Конфигурация была успешно сохранена", "Не открылось окно сохранения конфигурации")  # Шаг 10
    assert_window(wizard, "OK", "Окно сохранения конфигурации зависло", "click")  # Шаг 11


def test_smoke_config(securos_auto):
    '''3. Проверка конфигурации (дефолт после визарда)
    Описание: Тест для проверки корректного создания стандартной конфигурации мастером конфигурации и работоспособности дерева объектов.
    Предусловия: Все предыдущие тесты в тест-комплекте завершены успешно.

    Шаги выполнения:
        1. Открыть дерево объектов в конфигурации из панели управления (кнопка "Шестеренка").
        2. Развернуть объект "Система".
        3. Развернуть объект зоны охраны.
        4. Развернуть группу объектов "Права пользователей".
        5. Развернуть группу объектов "Оборудование".
        6. Развернуть объект "Компьютер".
        7. Развернуть объект "Рабочие столы".
        8. Развернуть объект "Рабочий стол".
        9. Закрыть дерево объектов в конфигурации из панели управления.

    Ожидаемый результат:
        1. Дерево открылось, в списке только свернутый объект "Система".
        2. Под объектом "Система" появился объект зоны охраны.
        3. Под объектом зоны охраны появилось две группы объектов: "Оборудование" и "Права пользователей".
        4. Под развернутой группой объектов появились два объекта: "Права опытных пользователей" и "Права простых пользователей".
        5. Под развернутой группой объектов появился объект "Компьютер".
        6. Под объектом "Компьютер" появилась группа объектов "Рабочие столы", а так же объекты "Health Monitor" и "Конвертер архива".
        7. Под объектом "Рабочие столы" появился объект "Рабочий стол".
        8. Под объектом "Рабочий стол" появился объект "Медиа Клиент".
        9. Дерево закрылось.'''

    shutil.copy2(os.path.join(os.path.dirname(os.path.abspath(__file__)), "data", "key.iss"),
                 pytest.SECUROS_WIN)

    cli = securos_auto["client"].top_window()
    cli["CheckBox3"].click_input()

    tree = securos_auto["core"].top_window()
    assert tree.exists() # Шаг 1
    #tree["Система"].click_input(double=True)
    assert tree["SecurOS Enterprise"].exists() # Шаг 2
    tree["SecurOS Enterprise"].click_input(double=True)
    assert tree["Права пользователей"].exists()
    assert tree["Оборудование"].exists() # Шаг 3
    tree["Права пользователей"].click_input(double=True)
    assert tree["Права опытных пользователей"].exists()
    assert tree["Права простых пользователей"].exists() # Шаг 4
    tree["Оборудование"].click_input(double=True)
    assert tree.window(title_re = "Компьютер*").exists() # Шаг 5
    tree.window(title_re = "Компьютер*").click_input(double=True)
    tree.window(title_re = "Компьютер*").type_keys("{ENTER}")
    assert tree["Health Monitor"].exists()
    assert tree["Конвертер архива"].exists()
    assert tree["Рабочие столы"].exists() # Шаг 6
    tree["Рабочие столы"].click_input(double=True)
    assert tree.window(title_re = "Рабочий стол *").exists()
    tree.window(title_re="Рабочий стол *").click_input(double=True)
    assert tree["Медиа Клиент"].exists()
    cli["CheckBox3"].click_input()
    assert not securos_auto["core"].windows()


def test_smoke_object(securos_auto):
    '''4. Добавление объекта (камера с вирт. видео)
    Описание: Тест для проверки возможности добавить рабочую камеру в конфигурацию. Проверяет возможность добавление
    объектов, работоспособность медиа клиента и отображение видео.
    Предусловия: Все предыдущие тесты в тест-комплекте завершены успешно. В папку с тестами помещено виртуальное видео
    из приложения 1.01.

    Шаги выполнения:
        1. Открыть дерево объектов в конфигурации из панели управления
        2. Выделить объект "Компьютер" в дереве
        3. Активировать контрол "Создать" на панели управления
        4. Выбрать элемент "Устройство видеозахвата" в выпадающем списке
        5. Ввести в поля следующую информацию и применить
            а. Тип: virtual
            b. Канал граббера: 01
        6. Создать под объектом граббера камеру со следующими настройками
            a. Канал: 1

    Ожидаемый результат:
        1. Дерево открылось
        2. Объект выделен
        3. Появилось контекстное меню с элементами для добавления
        4. Появилось окно настроек нового объекта
        5. Настройки запомнились, окно закрылось, в дереве объектов под объеком Компьютер появилась группа объектов
        Устройства видеозахвата, под которой появился объект Устройство видеозахвата 1
        6. Под объектом Устройство видеозахвата 1 появился объект Камера 1. На медиа клиенте появилась камера
        и видеопоток с нее.'''

    shutil.copy2(os.path.join(os.path.dirname(os.path.abspath(__file__)), "data", "1._01"),
                 pytest.SECUROS_WIN)

    cli = securos_auto["client"].top_window()
    cli["CheckBox3"].click_input()

    tree = securos_auto["core"].top_window()
    assert tree.exists() # Шаг 1
    #tree["Система"].click_input(double=True)
    #tree["SecurOS Enterprise"].click_input(double=True)
    #tree["Оборудование"].click_input(double=True)
    tree.window(title_re="Компьютер*").click_input()
    assert tree.window(title_re="Компьютер*").is_selected() # Шаг 2
    time.sleep(1)
    securos_auto["core"]["Pane22"]["Создать"].click_input()
    menu = securos_auto["core"].Menu
    assert menu.exists() # Шаг 3
    time.sleep(1)
    menu["Устройство видеозахвата"].click_input()
    sets = securos_auto["core"].window(title_re="Параметры")
    assert sets.exists() # Шаг 4
    time.sleep(1)
    sets["ComboBox"].click_input()
    sets["ListBox"].type_keys("{UP 1}{DOWN 40}{ENTER}") # TODO: костыль, сломается когда добавят больше производителей
    sets["Ok Enter"].click_input()
    time.sleep(1)
    pane = securos_auto["core"].Pane
    pane["ComboBox33"].click_input()
    pane["01"].click_input()
    pane["ОК"].click_input()
    assert tree["Устройство видеозахвата 1"].exists() # Шаг 5
    time.sleep(1)
    tree["Устройство видеозахвата 1"].click_input(button="right")
    menu["Создать"].click_input()
    menu["Камера"].click_input()
    sets["Ok Enter"].click_input()
    pane["ОК"].click_input()
    time.sleep(1)
    monitor = securos_auto["monitor"].top_window()
    monitor["Камера 1"].click_input()
    assert tree.window(title="Камера 1 [1]").exists() # Шаг 6
    '''Хитрая проверка - проверяем наличие кнопки "Поставить на рхрану" в окне камеры. Если камеры нет в МК или нет
    с нее видео - то кнопка будет недоступна и это баг. Так костыль пока конечно.'''
    assert monitor.window(title_re="Поставить на охрану*").exists() # TODO: Надо проверять видеопоток лучше возможно


def test_smoke_shutdown(securos_auto, securos_pids):
    '''5. Завершение работы
    Описание: Тест для проверки корректного завершения работы SecurOS по команде Завершить работу из панели управления.
    Предусловия: Все предыдущие тесты в тест-комплекте завершены успешно.

    Шаги выполнения:
        1. Активировать контрол-иконку слева в панели управления
        2. В выпадающем меню выбрать элемент "Завершение работы"

    Ожидаемый результат:
        1. Открылось выпадающее меню с вариантами "Справка (F1)", "Настройка Панели управления" и "Завершение работы"
        2. SecurOS закрыл все процессы и выгрузился из памяти без падений и сообщений об ошибках.'''

    cli = securos_auto["client"].top_window()
    cli["MenuItem"].click_input()
    menu = securos_auto["client"].Menu
    assert menu["Завершение работы"].exists() # Шаг 1
    menu["Завершение работы"].click_input()
    time.sleep(10)
    for pid in securos_pids.values(): # Шаг 2
        if pid:
            assert not psutil.pid_exists(pid)


def test_smoke_restart(securos_start, securos_auto):
    '''6. Сохранение конфигурации (второй запуск)
    Описание: Тест, проверяющий повторный запуск уже настроенной системы и сохранение изменений, внесенных в конфигурацию
    за предыдущий сеанс работы.
    Предусловия: Все предыдущие тесты в тест-комплекте завершены успешно.

    Шаги выполнения:
        1. Запустить SecurOS
        2. Открыть дерево объектов в конфигурации из панели управления

    Ожидаемый результат:
        1. SecurOS запускается без ошибок, отображается медиа клиент и панель управления. В медиа клиенте есть камера,
        с которой идет отображение видео.
        2. В дереве объектов присутсвует группа объектов Устройства видеозахвата под объектом Компьютер, под группой
        присутствует объект Устройство видеозахвата 1, а под ней объект Камера 1.'''

    # Шаг 1 проверяется на этапе запуска теста в securos_auto
    cli = securos_auto["client"].top_window()
    cli["CheckBox3"].click_input()
    tree = securos_auto["core"].top_window()
    #tree["Система"].click_input(double=True)
    #tree["SecurOS Enterprise"].click_input(double=True)
    #tree["Оборудование"].click_input(double=True)
    #tree.window(title_re="Компьютер*").click_input(double=True)
    assert tree["Устройства видеозахвата"].exists()
    assert tree.window(title_re = "Устройство видеозахвата 1 [1]*").exists()
    assert tree["Камера 1 [1]"].exists()